package main

import (
	"fmt"
	"sort"
)

// 合并重叠区间
func merge(intervals [][]int) [][]int {
	if len(intervals) <= 1 {
		return intervals
	}

	// 1.按照区间起位置排序
	sort.Slice(intervals, func(i, j int) bool {
		return intervals[i][0] < intervals[j][0]
	})

	// 2.用于存储合并后的区间
	merged := [][]int{intervals[0]}

	// 3.遍历排序后的区间
	for i := 1; i < len(intervals); i++ {
		// 获取merge中最后一个区间
		last := merged[len(merged)-1]
		current := intervals[i]

		// 判断是否有重叠
		if last[1] >= current[0] {
			// 有重叠,合并区间
			last[1] = max(last[1], current[1])
		} else {
			// 没有重叠,添加当前区间
			merged = append(merged, current)
		}
	}

	return merged
}

// 辅助函数: 求最大值
func max(a, b int) int {
	if a > b {
		return a
	}
	return b
}

func main() {
	// 测试示例1: 基本重叠
	intervals1 := [][]int{{1, 3}, {2, 6}, {8, 10}, {15, 18}}
	fmt.Printf("输入: %v\n", intervals1)
	fmt.Printf("输出: %v\n\n", merge(intervals1))

	// 测试示例2: 完全包含
	intervals2 := [][]int{{1, 4}, {4, 5}}
	fmt.Printf("输入: %v\n", intervals2)
	fmt.Printf("输出: %v\n\n", merge(intervals2))

	// 测试示例3: 多重重叠
	intervals3 := [][]int{{1, 4}, {0, 4}}
	fmt.Printf("输入: %v\n", intervals3)
	fmt.Printf("输出: %v\n\n", merge(intervals3))

	// 测试示例4: 无重叠
	intervals4 := [][]int{{1, 2}, {3, 4}, {5, 6}}
	fmt.Printf("输入: %v\n", intervals4)
	fmt.Printf("输出: %v\n", merge(intervals4))
}
